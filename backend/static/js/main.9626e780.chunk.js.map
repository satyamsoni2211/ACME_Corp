{"version":3,"sources":["components/nav/index.jsx","lib/map/mapSlice.js","components/map_chart/index.jsx","components/states/index.jsx","App.jsx","reportWebVitals.js","store.js","index.js"],"names":["Nav","class","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","mapSlice","createSlice","name","initialState","selectedState","selectedAircraft","dataLoading","reducers","state","action","console","log","payload","clearState","setAircraft","clearAircraft","mapSliceActions","actions","CheckableTag","Tag","MapChart","useSelector","map","dispatch","useDispatch","useState","data","setdata","popoverContent","setpopovercontent","triggerPopover","settriggerPopover","coordinates","zoom","position","setPosition","useEffect","fetch","process","then","response","json","resdata","interval","setInterval","clearInterval","projection","projectionConfig","scale","center","onMoveEnd","geography","geographies","geo","properties","NAME","style","POP_EST","default","fill","outline","pressed","title","zIndex","onClick","geometry","longitude","length","d","latitude","lamin","_","lamax","lomin","lomax","rsmKey","className","pos","xmlns","width","height","viewBox","stroke","strokeWidth","x1","y1","x2","y2","Modal","show","autoFocus","onEscapeKeyDown","size","Header","Title","Body","index","checked","icao24","cursor","border","onChange","tag","Footer","avatar","paragraph","rows","columns","dataIndex","key","States","u","window","origin","url","URL","searchParams","append","toString","res","dataSource","pagination","pageSize","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mapSliceReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.9626e780.chunk.js","sourcesContent":["export default function Nav() {\n    return <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container-fluid\">\n            <a class=\"navbar-brand\" href=\"#\">ACME Corp</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n        </div>\n    </nav>\n\n}","import { createSlice } from \"@reduxjs/toolkit\"\n\nexport const mapSlice = createSlice({\n    name: \"map\",\n    initialState: {\n        selectedState: null,\n        selectedAircraft: null,\n        dataLoading: null,\n    },\n    reducers: {\n        selectedState: (state, action) => {\n            console.log(action, state)\n            return {\n                ...state,\n                selectedState: action.payload\n            }\n        },\n        clearState: (state) => {\n            return {\n                ...state,\n                selectedState: null\n            }\n        },\n        setAircraft: (state, action) => {\n            return {\n                ...state,\n                selectedAircraft: action.payload\n            }\n        },\n        clearAircraft: (state) => {\n            return {\n                ...state,\n                selectedAircraft: null\n            }\n        }\n    }\n})\nexport const mapSliceActions = mapSlice.actions;\nexport default mapSlice.reducer;","import {\n    ComposableMap,\n    Geographies,\n    Geography,\n    ZoomableGroup\n} from \"react-simple-maps\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { Modal } from \"react-bootstrap\";\nimport { Tag, Tooltip, Skeleton } from 'antd';\nimport { mapSliceActions } from \"src/lib/map/mapSlice\"\nimport * as _ from 'lodash';\nimport { useSelector } from \"react-redux\";\n\nconst { CheckableTag } = Tag;\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = () => {\n    const state = useSelector(state => state.map)\n    const dispatch = useDispatch();\n    const [data, setdata] = useState([]);\n    const [popoverContent, setpopovercontent] = useState(null);\n    const [triggerPopover, settriggerPopover] = useState(false);\n\n    const [position, setPosition] = useState({ coordinates: [0, 0], zoom: 1 });\n\n    function handleZoomIn() {\n        if (position.zoom >= 4) return;\n        setPosition(pos => ({ ...pos, zoom: pos.zoom * 2 }));\n    }\n\n    function handleZoomOut() {\n        if (position.zoom <= 1) return;\n        setPosition(pos => ({ ...pos, zoom: pos.zoom / 2 }));\n    }\n\n    function handleMoveEnd(position) {\n        setPosition(position);\n    }\n    useEffect(() => {\n        fetch(\n            `${process.env.REACT_APP_BACKEND_DOMAIN}/all_states/`\n        ).then(response => response.json()).then(resdata => {\n            setdata(resdata)\n        })\n        const interval = setInterval(() => fetch(\n            `${process.env.REACT_APP_BACKEND_DOMAIN}/all_states/`\n        ).then(response => response.json()).then(resdata => {\n            setdata(resdata)\n        }), 60000\n        )\n        return () => clearInterval(interval)\n    }, []);\n    return data ? (\n        <>\n            <ComposableMap\n                projection=\"geoAlbers\"\n                projectionConfig={{\n                    scale: 100\n                }}\n            >\n                <ZoomableGroup\n                    zoom={position.zoom}\n                    center={position.coordinates}\n                    onMoveEnd={handleMoveEnd}\n                >\n                    <Geographies geography={geoUrl}>\n                        {({ geographies }) =>\n                            geographies.map(geo => {\n                                const { NAME, POP_EST } = geo.properties;\n                                let style = {\n                                    default: {\n                                        fill: \"#D6D6DA\",\n                                        outline: \"none\"\n                                    },\n                                    pressed: {\n                                        fill: \"#E42\",\n                                        outline: \"none\"\n                                    }\n                                };\n                                if (data[NAME]) {\n                                    style.default = {\n                                        fill: \"#F53\",\n                                        outline: \"none\"\n                                    };\n                                }\n                                return <Tooltip title={NAME}\n                                    zIndex={1000}\n                                    key={NAME}>\n                                    <Geography\n                                        key={geo.rsmKey}\n                                        geography={geo}\n                                        style={style}\n                                        onClick={() => {\n                                            console.log(geo)\n                                            const coordinates = geo.geometry.coordinates[0];\n                                            console.log(coordinates)\n                                            const longitude = coordinates.length == 1 ? coordinates.map(d => d[0][0]) :\n                                                coordinates.map(d => d[0])\n                                            const latitude = coordinates.length == 1 ? coordinates.map(d => d[0][1]) :\n                                                coordinates.map(d => d[1])\n                                            if (data[NAME]) {\n                                                dispatch(mapSliceActions.selectedState({\n                                                    name: NAME,\n                                                    lamin: _.min(latitude),\n                                                    lamax: _.max(latitude),\n                                                    lomin: _.min(longitude),\n                                                    lomax: _.max(longitude)\n                                                }));\n                                                settriggerPopover(true)\n                                                setpopovercontent({\n                                                    NAME,\n                                                    data: data[NAME]\n                                                })\n\n                                            }\n                                        }}\n                                    />\n                                </Tooltip>\n                            })\n                        }\n                    </Geographies>\n                </ZoomableGroup>\n            </ComposableMap>\n            <div className=\"controls\">\n                <button onClick={handleZoomIn}\n                    className=\"btn btn-danger mr-1\">\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"3\"\n                    >\n                        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n                        <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n                    </svg>\n                </button>\n                <button onClick={handleZoomOut}\n                    className=\"btn btn-danger\">\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"3\"\n                    >\n                        <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n                    </svg>\n                </button>\n            </div>\n            <Modal show={triggerPopover}\n                autoFocus\n                onEscapeKeyDown={() => settriggerPopover(false)}\n                size={'lg'}>\n                <Modal.Header>\n                    <Modal.Title>{popoverContent && popoverContent.NAME}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p className=\"text-secondary\">Click tags for detailed aircraft tracking </p>\n                    {\n                        popoverContent && popoverContent.data.map((d, index) => {\n                            let colors = [\n                                'success', 'error', 'warning', 'default', 'processing'\n                            ];\n                            return <CheckableTag key={index}\n                                className=\"m-1\"\n                                checked={state.selectedAircraft === d.icao24}\n                                style={{ cursor: \"pointer\", border: \"1px solid gray\" }}\n                                onChange={(tag, checked) => {\n                                    if (tag) {\n                                        dispatch(mapSliceActions.setAircraft(d.icao24))\n                                    } else {\n                                        dispatch(mapSliceActions.clearAircraft())\n                                    }\n                                }}>{d.icao24}</CheckableTag>\n                        })\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                    <button className=\"btn btn-secondary\"\n                        onClick={() => {\n                            settriggerPopover(false);\n                        }}>Close</button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    ) : (\n        <Skeleton avatar paragraph={{ rows: 4 }} />\n    );\n};\n\nexport default MapChart;","import { Table, Skeleton } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react'\nimport * as _ from 'lodash';\n\nconst columns = [\n    {\n        title: 'icao24',\n        dataIndex: 'icao24',\n        key: 'icao24',\n    },\n    {\n        title: 'callsign',\n        dataIndex: 'callsign',\n        key: 'callsign',\n    },\n    {\n        title: 'origin_country',\n        dataIndex: 'origin_country',\n        key: 'origin_country',\n    },\n]\n\nexport default function States() {\n    const state = useSelector(state => state.map.selectedState);\n    const [data, setdata] = useState(null);\n\n    useEffect(() => {\n        let u = process.env.REACT_APP_BACKEND_DOMAIN;\n        if (u === \"\") {\n            u = window.origin\n        }\n        const url = new URL(`${u}/all_states/`)\n\n        if (state) {\n            url.searchParams.append(\"lamin\", state.lamin)\n            url.searchParams.append(\"lamax\", state.lamax)\n            url.searchParams.append(\"lomin\", state.lomin)\n            url.searchParams.append(\"lomax\", state.lomax)\n            fetch(url.toString()).then(\n                res => res.json()\n            ).then(\n                data =>\n                    setdata(data[state.name])\n            )\n        }\n    }, [state]);\n    if (!state || _.isEmpty(state)) {\n        return <p>No State Selected ...</p>\n    }\n    return data != null ? (\n        <>\n            <p>Found {data.length} flights</p>\n            <Table columns={columns}\n                dataSource={data}\n                pagination={{ pageSize: 5 }} />\n        </>\n    ) : <Skeleton paragraph={3} avatar />\n}","import './App.css';\nimport Nav from \"./components/nav\";\nimport MapChart from \"./components/map_chart\";\nimport States from './components/states';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return <>\n    <Nav />\n    <div className=\"container-fluid w-100\">\n      <div className=\"row\" >\n        <div className=\"col\">\n          <div className=\"row\">\n            <p className=\"text-primary text-center availability-header p-0 m-0\">Country AirCraft Availability</p>\n            <span className=\"text-secondary text-center\">(click to see aircraft availability)</span>\n            <span className=\"text-secondary text-center\">(scroll to zoom in and out)</span>\n          </div>\n          <div className=\"row\">\n            <MapChart />\n          </div>\n        </div>\n        <div className=\"col\">\n          <States />\n        </div>\n      </div>\n    </div>\n  </>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport mapSliceReducer from \"./lib/map/mapSlice\";\n\nexport default configureStore(\n    {\n        reducer: {\n            map: mapSliceReducer\n        }\n    }\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}